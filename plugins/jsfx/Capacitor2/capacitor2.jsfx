// License: GPL v3
// Original License: MIT

desc:Capacitor2_JSFX
//tags: funky filter effect that's modeled after some specific 
//      dielectric ceramic capacitors
//author: airwindows, ported by vandorb12

// Set automateable faders
slider1:1<0,1,.001>Lowpass
slider2:<0,1,.001>Highpass
slider3:<0,1,.001>NonLin
slider4:1<0,1,.001>Dry/Wet

// Define plugin inputs and outputs
in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

// Begin execution of code
@init  // You can define functions here!
last_lp;
last_hp;
last_wet;


@slider // execute changes when slider parameters change
    cut_lp = pow(slider1,2);
    cut_hp = pow(slider2,2);
    nonLin = 1 +((1-slider3)*6);
    nonLinTrim = 1.5/nonLin^(1/3);
    wetChase = slider4;

speed_lp = 300 / (abs(last_lp - cut_lp) + 1);
speed_hp = 300 / (abs(last_hp - cut_hp) + 1);
speed_wet = 300 / (abs(last_wet - wetChase) + 1);
last_lp = cut_lp;
last_hp = cut_hp;
last_wet = wetChase;

@sample // Process this math with every PCM audio sample

drySampleL = spl0;
drySampleR = spl1;

dielectricScaleL = abs(2-((spl0 + nonLin)/nonLin));
dielectricScaleR = abs(2-((spl1 + nonLin)/nonLin));

//positive voltage will mean lower capacitance when capacitor is barium titanate
//on the lowpass, higher pressure means positive swings/smaller cap/larger value for lowpassAmount
lowpassBaseAmount = (((lowpassBaseAmount * speed_lp) + cut_lp) / (speed_lp + 1));
lowpassAmountL = lowpassBaseAmount * dielectricScaleL;
invLowpassL = 1 - lowpassAmountL;
lowpassAmountR = lowpassBaseAmount * dielectricScaleR;
invLowpassR = 1 - lowpassAmountR;

//on the highpass, higher pressure means positive swings/smaller cap/larger value for highpassAmount
highpassBaseAmount = (((highpassBaseAmount * speed_hp) + cut_hp) / (speed_hp + 1));
highpassAmountL = highpassBaseAmount * dielectricScaleL;
invHighpassL = 1 - highpassAmountL;
highpassAmountR = highpassBaseAmount * dielectricScaleR;
invHIghpassR = 1 - highpassAmountR;

wet = (((wet * speed_wet) + wetChase) / (speed_wet +1));

count += 1;
count > 5 ? count = 0;

// Attempt to port switch statements
count == 0 ?
    (
        iirHighpassAL = (iirHighpassAL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassAL;
		iirLowpassAL = (iirLowpassAL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassAL;
		iirHighpassBL = (iirHighpassBL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassBL;
		iirLowpassBL = (iirLowpassBL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassBL;
		iirHighpassDL = (iirHighpassDL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassDL;
		iirLowpassDL = (iirLowpassDL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassDL;
		iirHighpassAR = (iirHighpassAR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassAR;
		iirLowpassAR = (iirLowpassAR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassAR;
		iirHighpassBR = (iirHighpassBR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassBR;
		iirLowpassBR = (iirLowpassBR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassBR;
		iirHighpassDR = (iirHighpassDR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassDR;
		iirLowpassDR = (iirLowpassDR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassDR;
    );
count == 1 ?
    (
        iirHighpassAL = (iirHighpassAL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassAL;
		iirLowpassAL = (iirLowpassAL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassAL;
		iirHighpassCL = (iirHighpassCL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassCL;
		iirLowpassCL = (iirLowpassCL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassCL;
		iirHighpassEL = (iirHighpassEL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassEL;
		iirLowpassEL = (iirLowpassEL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassEL;
		iirHighpassAR = (iirHighpassAR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassAR;
		iirLowpassAR = (iirLowpassAR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassAR;
		iirHighpassCR = (iirHighpassCR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassCR;
		iirLowpassCR = (iirLowpassCR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassCR;
		iirHighpassER = (iirHighpassER * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassER;
		iirLowpassER = (iirLowpassER * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassER;
    );
count == 2 ?
    (
        iirHighpassAL = (iirHighpassAL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassAL;
		iirLowpassAL = (iirLowpassAL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassAL;
		iirHighpassBL = (iirHighpassBL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassBL;
		iirLowpassBL = (iirLowpassBL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassBL;
		iirHighpassFL = (iirHighpassFL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassFL;
		iirLowpassFL = (iirLowpassFL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassFL;
		iirHighpassAR = (iirHighpassAR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassAR;
		iirLowpassAR = (iirLowpassAR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassAR;
		iirHighpassBR = (iirHighpassBR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassBR;
		iirLowpassBR = (iirLowpassBR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassBR;
		iirHighpassFR = (iirHighpassFR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassFR;
		iirLowpassFR = (iirLowpassFR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassFR;
    );
count == 3 ?
    (
        iirHighpassAL = (iirHighpassAL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassAL;
		iirLowpassAL = (iirLowpassAL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassAL;
		iirHighpassCL = (iirHighpassCL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassCL;
		iirLowpassCL = (iirLowpassCL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassCL;
		iirHighpassDL = (iirHighpassDL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassDL;
		iirLowpassDL = (iirLowpassDL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassDL;
		iirHighpassAR = (iirHighpassAR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassAR;
		iirLowpassAR = (iirLowpassAR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassAR;
		iirHighpassCR = (iirHighpassCR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassCR;
		iirLowpassCR = (iirLowpassCR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassCR;
		iirHighpassDR = (iirHighpassDR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassDR;
		iirLowpassDR = (iirLowpassDR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassDR;
    );
count == 4 ?
    (
        iirHighpassAL = (iirHighpassAL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassAL;
		iirLowpassAL = (iirLowpassAL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassAL;
		iirHighpassBL = (iirHighpassBL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassBL;
		iirLowpassBL = (iirLowpassBL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassBL;
		iirHighpassEL = (iirHighpassEL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassEL;
		iirLowpassEL = (iirLowpassEL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassEL;
		iirHighpassAR = (iirHighpassAR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassAR;
		iirLowpassAR = (iirLowpassAR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassAR;
		iirHighpassBR = (iirHighpassBR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassBR;
		iirLowpassBR = (iirLowpassBR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassBR;
		iirHighpassER = (iirHighpassER * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassER;
		iirLowpassER = (iirLowpassER * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassER;   
    );
count == 5 ?
    (
        iirHighpassAL = (iirHighpassAL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassAL;
		iirLowpassAL = (iirLowpassAL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassAL;
		iirHighpassCL = (iirHighpassCL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassCL;
		iirLowpassCL = (iirLowpassCL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassCL;
		iirHighpassFL = (iirHighpassFL * invHighpassL) + (spl0 * highpassAmountL); spl0 -= iirHighpassFL;
		iirLowpassFL = (iirLowpassFL * invLowpassL) + (spl0 * lowpassAmountL); spl0 = iirLowpassFL;
		iirHighpassAR = (iirHighpassAR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassAR;
		iirLowpassAR = (iirLowpassAR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassAR;
		iirHighpassCR = (iirHighpassCR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassCR;
		iirLowpassCR = (iirLowpassCR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassCR;
		iirHighpassFR = (iirHighpassFR * invHighpassR) + (spl1 * highpassAmountR); spl1 -= iirHighpassFR;
		iirLowpassFR = (iirLowpassFR * invLowpassR) + (spl1 * lowpassAmountR); spl1 = iirLowpassFR;
    );

//Highpass Filter chunk. This is three poles of IIR highpass, with a 'gearbox' that progressively
//steepens the filter after minimizing artifacts.

spl0 = (drySampleL * (1 - wet)) + (spl0 * nonLinTrim * wet);
spl1 = (drySampleR * (1 - wet)) + (spl1 * nonLinTrim * wet);